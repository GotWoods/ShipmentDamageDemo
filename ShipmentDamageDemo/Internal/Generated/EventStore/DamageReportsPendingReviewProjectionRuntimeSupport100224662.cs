// <auto-generated/>
#pragma warning disable
using Marten;
using Marten.Events.Aggregation;
using Marten.Internal.Storage;
using ShipmentDamageDemo.Projections;
using System;
using System.Linq;

namespace Marten.Generated.EventStore
{
    // START: DamageReportsPendingReviewProjectionLiveAggregation100224662
    public class DamageReportsPendingReviewProjectionLiveAggregation100224662 : Marten.Events.Aggregation.SyncLiveAggregatorBase<ShipmentDamageDemo.Projections.DamageReportsPendingReview>
    {
        private readonly ShipmentDamageDemo.Projections.DamageReportsPendingReviewProjection _damageReportsPendingReviewProjection;

        public DamageReportsPendingReviewProjectionLiveAggregation100224662(ShipmentDamageDemo.Projections.DamageReportsPendingReviewProjection damageReportsPendingReviewProjection)
        {
            _damageReportsPendingReviewProjection = damageReportsPendingReviewProjection;
        }



        public override ShipmentDamageDemo.Projections.DamageReportsPendingReview Build(System.Collections.Generic.IReadOnlyList<Marten.Events.IEvent> events, Marten.IQuerySession session, ShipmentDamageDemo.Projections.DamageReportsPendingReview snapshot)
        {
            if (!events.Any()) return null;
            ShipmentDamageDemo.Projections.DamageReportsPendingReview damageReportsPendingReview = null;
            var usedEventOnCreate = snapshot is null;
            snapshot ??= Create(events[0], session);;
            if (snapshot is null)
            {
                usedEventOnCreate = false;
                snapshot = CreateDefault(events[0]);
            }

            foreach (var @event in events.Skip(usedEventOnCreate ? 1 : 0))
            {
                snapshot = Apply(@event, snapshot, session);
            }

            return snapshot;
        }


        public ShipmentDamageDemo.Projections.DamageReportsPendingReview Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<ShipmentDamageDemo.Domain.DamagedShipmentReported> event_DamagedShipmentReported1:
                    return _damageReportsPendingReviewProjection.Create(event_DamagedShipmentReported1.Data);
                    break;
            }

            return null;
        }


        public ShipmentDamageDemo.Projections.DamageReportsPendingReview CreateDefault(Marten.Events.IEvent @event)
        {
            return new ShipmentDamageDemo.Projections.DamageReportsPendingReview();
        }


        public ShipmentDamageDemo.Projections.DamageReportsPendingReview Apply(Marten.Events.IEvent @event, ShipmentDamageDemo.Projections.DamageReportsPendingReview aggregate, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<ShipmentDamageDemo.Domain.NoteAdded> event_NoteAdded2:
                    _damageReportsPendingReviewProjection.Apply(event_NoteAdded2.Data, aggregate);
                    break;
            }

            return aggregate;
        }

    }

    // END: DamageReportsPendingReviewProjectionLiveAggregation100224662
    
    
    // START: DamageReportsPendingReviewProjectionInlineHandler100224662
    public class DamageReportsPendingReviewProjectionInlineHandler100224662 : Marten.Events.Aggregation.AggregationRuntime<ShipmentDamageDemo.Projections.DamageReportsPendingReview, System.Guid>
    {
        private readonly Marten.IDocumentStore _store;
        private readonly Marten.Events.Aggregation.IAggregateProjection _projection;
        private readonly Marten.Events.Aggregation.IEventSlicer<ShipmentDamageDemo.Projections.DamageReportsPendingReview, System.Guid> _slicer;
        private readonly Marten.Internal.Storage.IDocumentStorage<ShipmentDamageDemo.Projections.DamageReportsPendingReview, System.Guid> _storage;
        private readonly ShipmentDamageDemo.Projections.DamageReportsPendingReviewProjection _damageReportsPendingReviewProjection;

        public DamageReportsPendingReviewProjectionInlineHandler100224662(Marten.IDocumentStore store, Marten.Events.Aggregation.IAggregateProjection projection, Marten.Events.Aggregation.IEventSlicer<ShipmentDamageDemo.Projections.DamageReportsPendingReview, System.Guid> slicer, Marten.Internal.Storage.IDocumentStorage<ShipmentDamageDemo.Projections.DamageReportsPendingReview, System.Guid> storage, ShipmentDamageDemo.Projections.DamageReportsPendingReviewProjection damageReportsPendingReviewProjection) : base(store, projection, slicer, storage)
        {
            _store = store;
            _projection = projection;
            _slicer = slicer;
            _storage = storage;
            _damageReportsPendingReviewProjection = damageReportsPendingReviewProjection;
        }



        public override async System.Threading.Tasks.ValueTask<ShipmentDamageDemo.Projections.DamageReportsPendingReview> ApplyEvent(Marten.IQuerySession session, Marten.Events.Projections.EventSlice<ShipmentDamageDemo.Projections.DamageReportsPendingReview, System.Guid> slice, Marten.Events.IEvent evt, ShipmentDamageDemo.Projections.DamageReportsPendingReview aggregate, System.Threading.CancellationToken cancellationToken)
        {
            switch (evt)
            {
                case Marten.Events.IEvent<ShipmentDamageDemo.Domain.Approved> event_Approved4:
                    return null;
                    return aggregate;
                case Marten.Events.IEvent<ShipmentDamageDemo.Domain.NoteAdded> event_NoteAdded5:
                    aggregate ??= new ShipmentDamageDemo.Projections.DamageReportsPendingReview();
                    _damageReportsPendingReviewProjection.Apply(event_NoteAdded5.Data, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<ShipmentDamageDemo.Domain.DamagedShipmentReported> event_DamagedShipmentReported6:
                    aggregate = _damageReportsPendingReviewProjection.Create(event_DamagedShipmentReported6.Data);
                    return aggregate;
            }

            return aggregate;
        }


        public ShipmentDamageDemo.Projections.DamageReportsPendingReview Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<ShipmentDamageDemo.Domain.DamagedShipmentReported> event_DamagedShipmentReported3:
                    return _damageReportsPendingReviewProjection.Create(event_DamagedShipmentReported3.Data);
                    break;
            }

            return null;
        }


        public ShipmentDamageDemo.Projections.DamageReportsPendingReview CreateDefault(Marten.Events.IEvent @event)
        {
            return new ShipmentDamageDemo.Projections.DamageReportsPendingReview();
        }

    }

    // END: DamageReportsPendingReviewProjectionInlineHandler100224662
    
    
}

